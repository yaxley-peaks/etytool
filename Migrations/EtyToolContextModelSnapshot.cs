// <auto-generated />
using EtyTool.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EtyTool.Migrations
{
    [DbContext(typeof(EtyToolContext))]
    partial class EtyToolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EtyTool.Entities.Etymology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("etymology_pk");

                    b.HasIndex(new[] { "Name" }, "etymology_name_uniq")
                        .IsUnique();

                    b.ToTable("etymology", null, t =>
                        {
                            t.HasComment("List of langs seen before");
                        });
                });

            modelBuilder.Entity("EtyTool.Entities.Lang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("code")
                        .HasComment("ISO 639 SET 1, 2 letter codes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("langs_pk");

                    b.HasIndex(new[] { "Code" }, "langs_code_uniq")
                        .IsUnique();

                    b.ToTable("langs", null, t =>
                        {
                            t.HasComment("Languages");
                        });
                });

            modelBuilder.Entity("EtyTool.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("PK");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Etymology")
                        .HasColumnType("integer")
                        .HasColumnName("etymology")
                        .HasComment("Lang whence a word comes from");

                    b.Property<int>("Lang")
                        .HasColumnType("integer")
                        .HasColumnName("lang")
                        .HasComment("fk from langs, language the word is in");

                    b.Property<string>("Word1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("word")
                        .HasComment("word");

                    b.HasKey("Id")
                        .HasName("word__pk");

                    b.HasIndex("Etymology");

                    b.HasIndex("Lang");

                    b.HasIndex(new[] { "Word1" }, "word_uniq")
                        .IsUnique();

                    b.ToTable("words", null, t =>
                        {
                            t.HasComment("associate word with etymology");
                        });
                });

            modelBuilder.Entity("EtyTool.Entities.Word", b =>
                {
                    b.HasOne("EtyTool.Entities.Etymology", "EtymologyNavigation")
                        .WithMany("Words")
                        .HasForeignKey("Etymology")
                        .IsRequired()
                        .HasConstraintName("words_etymology_id_fk");

                    b.HasOne("EtyTool.Entities.Lang", "LangNavigation")
                        .WithMany("Words")
                        .HasForeignKey("Lang")
                        .IsRequired()
                        .HasConstraintName("words_langs_id_fk");

                    b.Navigation("EtymologyNavigation");

                    b.Navigation("LangNavigation");
                });

            modelBuilder.Entity("EtyTool.Entities.Etymology", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("EtyTool.Entities.Lang", b =>
                {
                    b.Navigation("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
